# -*- coding: utf-8 -*-
"""EXPLORATORY DATA ANALYSIS -CREDIT CARD DEFAULTERS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jkt4mwmxwNKI5Unwxd9scKTVHsLefXkR
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

dataset=pd.read_csv('UCI_Credit_Card.csv')
dataset.head(5)

dataset.shape

dataset.info()

dataset.describe()

#missing values
dataset.isnull().sum()



dataset.rename(columns={"default.payment.next.month": "Default"}, inplace=True)
dataset.rename(columns={"SEX": "Gender"}, inplace=True)
dataset.drop('ID', axis = 1, inplace =True) # drop column "ID"
dataset.info()

dataset['EDUCATION'].unique()

"""The categories 4:others, 5:unknown, and 6:unknown can be grouped into a single class '4'."""

dataset['EDUCATION']=np.where(dataset['EDUCATION'] == 5, 4, dataset['EDUCATION'])
dataset['EDUCATION']=np.where(dataset['EDUCATION'] == 6, 4, dataset['EDUCATION'])
dataset['EDUCATION']=np.where(dataset['EDUCATION'] == 0, 4, dataset['EDUCATION'])

dataset['EDUCATION'].unique()

"""Similarly, the column 'marriage' should have three categories: 1 = married, 2 = single, 3 = others and also it contains a category '0' which can be joined to the category '3'."""

dataset['MARRIAGE'].unique()

dataset['MARRIAGE']=np.where(dataset['MARRIAGE'] == 0, 3, dataset['MARRIAGE'])
dataset['MARRIAGE'].unique()

# The frequency of defaults
yes = dataset.Default.sum()
no = len(dataset)-yes

# Percentage
yes_perc = round(yes/len(dataset)*100, 1)
no_perc = round(no/len(dataset)*100, 1)

import sys 
plt.figure(figsize=(7,4))
sns.set_context('notebook', font_scale=1.2)
sns.countplot('Default',data=dataset, palette="rainbow")
plt.annotate('Non-default: {}'.format(no), xy=(-0.3, 15000), xytext=(-0.3, 3000), size=12)
plt.annotate('Default: {}'.format(yes), xy=(0.7, 15000), xytext=(0.7, 3000), size=12)
plt.annotate(str(no_perc)+" %", xy=(-0.3, 15000), xytext=(-0.1, 8000), size=12)
plt.annotate(str(yes_perc)+" %", xy=(0.7, 15000), xytext=(0.9, 8000), size=12)
plt.title('COUNT OF CREDIT CARDS', size=14)
#Removing the frame
plt.box(False);
plt.savefig

subset = dataset[['Gender', 'EDUCATION', 'MARRIAGE', 'PAY_0', 'PAY_2', 'PAY_3', 'PAY_4', 
               'PAY_5', 'PAY_6', 'Default']]

f, axes = plt.subplots(3, 3, figsize=(20, 15), facecolor='white')
f.suptitle('FREQUENCY OF CATEGORICAL VARIABLES (BY TARGET)')
ax1 = sns.countplot(x="Gender", hue="Default", data=subset, palette="rainbow", ax=axes[0,0])
ax2 = sns.countplot(x="EDUCATION", hue="Default", data=subset, palette="rainbow",ax=axes[0,1])
ax3 = sns.countplot(x="MARRIAGE", hue="Default", data=subset, palette="rainbow",ax=axes[0,2])
ax4 = sns.countplot(x="PAY_0", hue="Default", data=subset, palette="rainbow", ax=axes[1,0])
ax5 = sns.countplot(x="PAY_2", hue="Default", data=subset, palette="rainbow", ax=axes[1,1])
ax6 = sns.countplot(x="PAY_3", hue="Default", data=subset, palette="rainbow", ax=axes[1,2])
ax7 = sns.countplot(x="PAY_4", hue="Default", data=subset, palette="rainbow", ax=axes[2,0])
ax8 = sns.countplot(x="PAY_5", hue="Default", data=subset, palette="rainbow", ax=axes[2,1])
ax9 = sns.countplot(x="PAY_6", hue="Default", data=subset, palette="rainbow", ax=axes[2,2]);

df=dataset.copy()
df.head(5)

df['Gender'] = df['Gender'].map({2:'Female', 1:'Male'})
df['MARRIAGE'] = df['MARRIAGE'].map({1:'married', 2:'single', 3:'other', 0: 'other'}) 
df['EDUCATION'] = df['EDUCATION'].map({1:'graduate school', 2:'university', 3:'high school', 4:'others', 5:'unknown', 6:'unknown', 0:'unknown'})
df['PAY_0'] = df['PAY_0'].astype(str) 
df['PAY_2'] = df['PAY_2'].astype(str) 
df['PAY_3'] = df['PAY_3'].astype(str) 
df['PAY_4'] = df['PAY_4'].astype(str) 

df.head()

total = float(len(dataset))
f,ax= plt.subplots(figsize=(10,8))
sns.countplot(x="Gender", hue="Default", data=df, palette="rainbow")
plt.title('FREQUENCY OF CATEGORICAL VARIABLE:GENDER (BY TARGET)', SIZE=15)
for p in ax.patches:
    height = p.get_height()
    ax.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}'.format(height/total),
            ha="center")





total = float(len(df))
f,ax= plt.subplots(figsize=(10,8))
sns.countplot(x="EDUCATION", hue="Default", data=df, palette="rainbow")
plt.title('FREQUENCY OF CATEGORICAL VARIABLE:EDUCATION (BY TARGET)', SIZE=15)
for p in ax.patches:
    height = p.get_height()
    ax.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}'.format(height/total),
            ha="center")

total = float(len(dataset))
f,ax= plt.subplots(figsize=(10,8))
sns.countplot(x="MARRIAGE", hue="Default", data=df, palette="rainbow")
plt.title('FREQUENCY OF CATEGORICAL VARIABLE:MARRIAGE (BY TARGET)', SIZE=15)
for p in ax.patches:
    height = p.get_height()
    ax.text(p.get_x()+p.get_width()/2.,
            height + 3,
            '{:1.2f}'.format(height/total),
            ha="center")

total = float(len(dataset))
f,ax= plt.subplots(figsize=(10,8))
sns.countplot(x="PAY_0", hue="Default", data=df, palette="rainbow")
plt.title('FREQUENCY OF CATEGORICAL VARIABLE:PAY_0 (BY TARGET)', SIZE=15)

total = float(len(dataset))
f,ax= plt.subplots(figsize=(10,8))
sns.countplot(x="PAY_2", hue="Default", data=df, palette="rainbow")
plt.title('FREQUENCY OF CATEGORICAL VARIABLE:PAY_1 (BY TARGET)', SIZE=15)

f,ax= plt.subplots(figsize=(10,8))
sns.countplot(x="PAY_3", hue="Default", data=df, palette="rainbow")
plt.title('FREQUENCY OF CATEGORICAL VARIABLE:PAY_3 (BY TARGET)', SIZE=15)

f,ax= plt.subplots(figsize=(10,8))
sns.countplot(x="PAY_4", hue="Default", data=df, palette="rainbow")
plt.title('FREQUENCY OF CATEGORICAL VARIABLE:PAY_4 (BY TARGET)', SIZE=15)

f,ax= plt.subplots(figsize=(10,8))
sns.countplot(x="PAY_5", hue="Default", data=df, palette="rainbow")
plt.title('FREQUENCY OF CATEGORICAL VARIABLE:PAY_5 (BY TARGET)', SIZE=15)

f,ax= plt.subplots(figsize=(10,8))
sns.countplot(x="PAY_6", hue="Default", data=df, palette="rainbow")
plt.title('FREQUENCY OF CATEGORICAL VARIABLE:PAY_6 (BY TARGET)', SIZE=15)

x1 = list(dataset[dataset['Default'] == 1]['LIMIT_BAL'])
x2 = list(dataset[dataset['Default'] == 0]['LIMIT_BAL'])

plt.figure(figsize=(12,4))
sns.set_context('notebook', font_scale=1.2)
#sns.set_color_codes("pastel")
plt.hist([x1, x2], bins = 40, normed=False, color=['gray', 'c'])
plt.xlim([0,600000])
plt.legend(['0:Non-Default', '1:Default'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('Limit Balance (NT dollar)')
plt.ylabel('Frequency')
plt.title('LIMIT BALANCE HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
plt.box(False)
plt.savefig('ImageName', format='png', dpi=200, transparent=True);

x1 = list(dataset[dataset['Default'] == 0]['LIMIT_BAL'])
x2 = list(dataset[dataset['Default'] == 1]['LIMIT_BAL'])

plt.figure(figsize=(8,8))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.xlabel('Limit Balance (NT dollar)')
plt.ylabel('Frequency')
sns.distplot(x1,hist=False ,label='0:Non-Default',color='gray',kde_kws=dict(linewidth=5))
sns.distplot(x2,hist=False ,label='1:Default',color='c',kde_kws=dict(linewidth=5))

plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['BILL_AMT1'])
x2 = list(dataset[dataset['Default'] == 0]['BILL_AMT1'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('BILL_AMT1 (NT dollar)')
plt.ylabel('Frequency')
plt.title('BILL_AMT1 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['BILL_AMT2'])
x2 = list(dataset[dataset['Default'] == 0]['BILL_AMT2'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('BILL_AMT2 (NT dollar)')
plt.ylabel('Frequency')
plt.title('BILL_AMT2 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['BILL_AMT3'])
x2 = list(dataset[dataset['Default'] == 0]['BILL_AMT3'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('BILL_AMT3 (NT dollar)')
plt.ylabel('Frequency')
plt.title('BILL_AMT3 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['BILL_AMT4'])
x2 = list(dataset[dataset['Default'] == 0]['BILL_AMT4'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('BILL_AMT4 (NT dollar)')
plt.ylabel('Frequency')
plt.title('BILL_AMT4 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['BILL_AMT5'])
x2 = list(dataset[dataset['Default'] == 0]['BILL_AMT5'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('BILL_AMT5 (NT dollar)')
plt.ylabel('Frequency')
plt.title('BILL_AMT5 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['BILL_AMT6'])
x2 = list(dataset[dataset['Default'] == 0]['BILL_AMT6'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('BILL_AMT6 (NT dollar)')
plt.ylabel('Frequency')
plt.title('BILL_AMT6  HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['PAY_AMT1'])
x2 = list(dataset[dataset['Default'] == 0]['PAY_AMT1'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('PAY_AMT1 (NT dollar)')
plt.ylabel('Frequency')
plt.title('PAY_AMT1 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['PAY_AMT2'])
x2 = list(dataset[dataset['Default'] == 0]['PAY_AMT2'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('PAY_AMT2 (NT dollar)')
plt.ylabel('Frequency')
plt.title('PAY_AMT2 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['PAY_AMT3'])
x2 = list(dataset[dataset['Default'] == 0]['PAY_AMT3'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('PAY_AMT3 (NT dollar)')
plt.ylabel('Frequency')
plt.title('PAY_AMT3 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['PAY_AMT4'])
x2 = list(dataset[dataset['Default'] == 0]['PAY_AMT4'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('PAY_AMT4 (NT dollar)')
plt.ylabel('Frequency')
plt.title('PAY_AMT4 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['PAY_AMT5'])
x2 = list(dataset[dataset['Default'] == 0]['PAY_AMT5'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('PAY_AMT5 (NT dollar)')
plt.ylabel('Frequency')
plt.title('PAY_AMT5 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['PAY_AMT6'])
x2 = list(dataset[dataset['Default'] == 0]['PAY_AMT6'])

plt.figure(figsize=(20,10))
sns.set_context('notebook', font_scale=1.2)
plt.xlim([0,600000])
plt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')
plt.xlabel('PAY_AMT6 (NT dollar)')
plt.ylabel('Frequency')
plt.title('PAY_AMT6 HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
sns.distplot(x1, label='1:Default', color="Red")
sns.distplot(x2, label='0:Non-Default', color="Green")
plt.legend()
plt.show()







#Continuous features
Data1={'LIMIT_BAL':dataset["LIMIT_BAL"], 
      'BILL_AMT1':dataset["BILL_AMT1"],
      'BILL_AMT2':dataset["BILL_AMT2"],
      'BILL_AMT3':dataset["BILL_AMT3"],
      'BILL_AMT4':dataset["BILL_AMT4"],
      'BILL_AMT5':dataset["BILL_AMT5"],
      'BILL_AMT6':dataset["BILL_AMT6"],
      'PAY_AMT1':dataset["PAY_AMT1"],
      'PAY_AMT2':dataset["PAY_AMT2"],
      'PAY_AMT3':dataset["PAY_AMT3"],
      'PAY_AMT4':dataset["PAY_AMT4"],
      'PAY_AMT5':dataset["PAY_AMT5"],
      'PAY_AMT6':dataset["PAY_AMT6"],
     }
df1=pd.DataFrame(Data1)
df1

pearsoncorr = df1.corr(method='pearson')
pearsoncorr

f,ax= plt.subplots(figsize=(10,8))
sns.heatmap(pearsoncorr)

f,ax= plt.subplots(figsize=(15,13))
sns.heatmap(pearsoncorr, annot = True, vmin=-1, vmax=1, center= 0, cmap= 'coolwarm', linewidths=3, linecolor='black')

#Categorical and continuous features
Data2={'SEX':dataset["Gender"],
       'EDUCATION':dataset["EDUCATION"],
       'MARRIAGE':dataset["MARRIAGE"],
       'AGE':dataset["AGE"],
      'LIMIT_BAL':dataset["LIMIT_BAL"], 
      'BILL_AMT1':dataset["BILL_AMT1"],
      'BILL_AMT2':dataset["BILL_AMT2"],
      'BILL_AMT3':dataset["BILL_AMT3"],
      'BILL_AMT4':dataset["BILL_AMT4"],
      'BILL_AMT5':dataset["BILL_AMT5"],
      'BILL_AMT6':dataset["BILL_AMT6"],
      'PAY_AMT1':dataset["PAY_AMT1"],
      'PAY_AMT2':dataset["PAY_AMT2"],
      'PAY_AMT3':dataset["PAY_AMT3"],
      'PAY_AMT4':dataset["PAY_AMT4"],
      'PAY_AMT5':dataset["PAY_AMT5"],
      'PAY_AMT6':dataset["PAY_AMT6"],
     }
df2=pd.DataFrame(Data2)
df2

spearmancorr = dataset.corr(method='spearman')
spearmancorr

spearmancorr = df2.corr(method='spearman')
spearmancorr

f,ax= plt.subplots(figsize=(20,18))
sns.heatmap(spearmancorr, annot = True, vmin=-1, vmax=1, center= 0, cmap= 'coolwarm', linewidths=3, linecolor='black')

#predictor continuous
list1=[dataset["LIMIT_BAL"],dataset["BILL_AMT1"],dataset["BILL_AMT2"],dataset["BILL_AMT3"],dataset["BILL_AMT4"],dataset["BILL_AMT5"],
       dataset["BILL_AMT6"],dataset["PAY_AMT1"],dataset["PAY_AMT2"],dataset["PAY_AMT3"],dataset["PAY_AMT4"],dataset["PAY_AMT5"],
       dataset["PAY_AMT6"]]
list1

#Response Categorical
list2=[dataset["Gender"],dataset["EDUCATION"],dataset["MARRIAGE"],dataset["AGE"]]
list2

for values in list1:
    for values in list2:
        corrmatrix[i,j]=sum((list1[,i]-mean(list1[,i]))*(list1[,j]-mean(list1[,j])))/(n-1)/((sd(list1[,i])*sd(list1[,j])))

a=np.corrcoef(list1,list2)
print(type(a))





def cov(list1, list2):
    xbar, ybar = list1.mean(), list2.mean()
    return np.sum((list1 - xbar)*(list2 - ybar))/(len(list1) - 1)

# Covariance matrix
def cov_mat(list1):
    return np.array([[cov(list1[0], list1[0]), cov(list1[0], list1[1])], \
                     [cov(list1[1], list1[0]), cov(list1[1], list1[1])]])

# Calculate covariance matrix 
cov_mat(list1) # (or with np.cov(X.T))

ax=sns.countplot(dataset["Default"],label="count")
D,N=dataset["Default"].value_counts()
percent_non_defaulter=(D/30000)*100
percent_defaulter=(N/30000)*100
print("Total number of Non-default",D)
print("Percentage of non-defaulters",percent_non_defaulter)
print("Default",N)
print("Percentage of defaulters",percent_defaulter)





continuous_cols = list(list(dataset[dataset.columns[:1]].columns.values))+list(dataset[dataset.columns[11:23]].columns.values)
continuous_cols

categorical_cols=list(dataset[dataset.columns[1:5]].columns.values)
categorical_cols

#categorical versus continuous

X=[dataset["LIMIT_BAL"],dataset["BILL_AMT1"],dataset["BILL_AMT2"],dataset["BILL_AMT3"],dataset["BILL_AMT4"],dataset["BILL_AMT5"],
       dataset["BILL_AMT6"],dataset["PAY_AMT1"],dataset["PAY_AMT2"],dataset["PAY_AMT3"],dataset["PAY_AMT4"],dataset["PAY_AMT5"],
       dataset["PAY_AMT6"]]
X

Y=[dataset["SEX"],dataset["EDUCATION"],dataset["MARRIAGE"],dataset["AGE"]]
Y

for values in X:
    for values in Y:
        a=np.corrcoef(X,Y)
        print(a)
        type(a)

for values in X:
    for values in X:
        a=np.corrcoef(X,X)
        print(a)
        type(a)

a=[]
for values in Y:
    for values in Y:
        a.append(np.corrcoef(Y,Y))
#         print(a)
#         type(a)
print(a)
df_a=pd.DataFrame(a)
df_a

for(j in X)           {
for(i in Y) {

  k=abs(cor.test(j, i, method = c( "spearman"))$estimate)
  cat(k, '\n')
  y <- rbind(y, k)
}}
y

X=np.array(X)
X
Y=np.array(Y)
Y

np.cov(X)

bins = [20,30,40,50,60,70,80]
names = ['21-30','31-40','41-50','51-60','61-70','71-80']
dataset['AGE_BIN'] = pd.cut(x=dataset.AGE, bins=bins, labels=names, right=True)

age_cnt = dataset.AGE_BIN.value_counts()
age_0 = (dataset.AGE_BIN[dataset['Default'] == 0].value_counts())
age_1 = (dataset.AGE_BIN[dataset['Default'] == 1].value_counts())

plt.subplots(figsize=(8,5))
# sns.barplot(data=defaulters, x='AGE_BIN', y='LIMIT_BAL', hue='def_pay', ci=0)
plt.bar(age_0.index, age_0.values, label='0:Non-Default',color='c')
plt.bar(age_1.index, age_1.values, label='1:Default',color='gray')
for x,y in zip(names,age_0):
    plt.text(x,y,y,fontsize=12)
for x,y in zip(names,age_1):
    plt.text(x,y,y,fontsize=12)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.title("Number of clients in each age group", fontsize=15)
plt.xlabel('Age Range of clients')
plt.ylabel('Frequency')
plt.legend(loc='upper right', fontsize=15)
plt.show()

x1 = list(dataset[dataset['Default'] == 1]['LIMIT_BAL'])
x2 = list(dataset[dataset['Default'] == 0]['LIMIT_BAL'])

plt.figure(figsize=(12,4))
sns.set_context('notebook', font_scale=1.2)
#sns.set_color_codes("pastel")
plt.hist([x1, x2], bins = 40, normed=False, color=['c', 'gray'])
plt.xlim([0,600000])
plt.legend(['0:Non-default', '1:Default'], loc='upper right', facecolor='white')
plt.xlabel('Limit Balance (NT dollar)')
plt.ylabel('Frequency')
plt.title('LIMIT BALANCE HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)
plt.box(False)
plt.savefig('ImageName', format='png', dpi=200, transparent=True);

var = ['BILL_AMT1','BILL_AMT2','BILL_AMT3','BILL_AMT4','BILL_AMT5','BILL_AMT6']

plt.figure(figsize = (10,8))
plt.title('Amount of bill statement (Apr-Sept) \ncorrelation plot (Pearson)')
corr = dataset[var].corr()
sns.heatmap(corr, annot = True, vmin=-1, vmax=1, center= 0, cmap= 'coolwarm', linewidths=3, linecolor='black')
plt.show()

var = ['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5']

plt.figure(figsize = (8,8))
plt.title('Amount of previous payment (Apr-Sept) \ncorrelation plot (Pearson)')
corr_1 = dataset[var].corr()
sns.heatmap(corr_1, annot = True, vmin=-1, vmax=1, center= 0, cmap= 'coolwarm', linewidths=3, linecolor='black')
plt.show()

var2 = ['PAY_0','PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']

plt.figure(figsize = (8,8))
plt.title('Repayment status (Apr-Sept) \ncorrelation plot (Pearson)')
corr_2= dataset[var2].corr()
sns.heatmap(corr_2, annot = True, vmin=-1, vmax=1, center= 0, cmap= 'coolwarm', linewidths=3, linecolor='black')
plt.show()



